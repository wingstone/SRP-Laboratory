Shader "Hidden/AdvancedRTR/Uber"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
    }
    SubShader
    {
        // No culling or depth
        Cull Off ZWrite Off ZTest Always

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
            };

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;
                return o;
            }

            sampler2D _MainTex;

            //======dithering

            // https://www.gdcvault.com/play/1023002/Low-Complexity-High-Fidelity-INSIDE
            // https://www.shadertoy.com/view/4t2SDh

            //note: uniformly distributed, normalized rand, [0, 1]
            float nrand( float2 n )
            {
                return frac(sin(dot(n.xy, float2(12.9898, 78.233)))* 43758.5453);
            }
            float Rand(float2 seed)
            {
                float nrnd0 = nrand( seed + frac(_Time.y) );

                // Convert uniform distribution into triangle-shaped distribution.
                // Result is range [-0.5,1.5] which is useful for actual dithering.
                float orig = nrnd0*2.0-1.0;
                nrnd0 = orig*rcp(sqrt(abs(orig)));
                nrnd0 = max(-1.0,nrnd0); // Nerf the NaN generated by 0*rsqrt(0). Thanks @FioraAeterna!
                nrnd0 = nrnd0-sign(orig)+0.5;
                
                // // Result is range [-1,1] 
                // nrnd0 = nrnd0* 2.0 - 1.0;
                // nrnd0 = sign(nrnd0) * (1.0 - sqrt(1.0 - abs(nrnd0)));

                return nrnd0;
            }


            float4 frag (v2f i) : SV_Target
            {
                float4 col = tex2D(_MainTex, i.uv);
                
                col.rgb = LinearToGammaSpace(col.rgb);
                col.rgb += Rand(i.uv)/225.0;
                col.rgb = GammaToLinearSpace(col.rgb);

                return col;
            }
            ENDCG
        }
    }
}
